#config PLATFORM CPU_MPMD
#config PROCESSES 4
#config CORES 24
#config MODE release

matrix<float,16384,16384,dist> as = {1.0f};
matrix<float,16384,16384,dist> bs = {0.001f};
matrix<float,16384,16384,dist> cs = {0.0f};


float initA(int a, int b, float x){
	return (float) a * 4 + b;
}

float initB(int a, int b, float x){
	return (float) 16 + a * 4 + b;
}

int negate(int a){
	return -a;
}

int identity(int a){
	return a;
}

int minusOne(int a){
	return -1;
}

float dotProduct(int i, int j, float Cij){
	float sum = Cij;

	for (int k = 0; k < cs.columnsLocal(); k++) {
		sum += as[[i,k]] * bs[[k,j]];
	}

	return sum;
}

main{
	as.mapIndexInPlace(initA());
	bs.mapIndexInPlace(initB());
	
	mkt::roi_start();
	
  mkt::timer_start("shift");

	as.shiftPartitionsHorizontally(negate());
	bs.shiftPartitionsVertically(negate());

	mkt::timer_stop("shift");	

	for (int i = 0; i < as.blocksInRow(); ++i) {
      mkt::timer_resume("map");
    	cs.mapLocalIndexInPlace(dotProduct());
      mkt::timer_stop("map");

      mkt::timer_resume("shift");
    	as.shiftPartitionsHorizontally(minusOne());
    	bs.shiftPartitionsVertically(minusOne());
      mkt::timer_stop("shift");
	}

  mkt::timer_resume("shift");
	as.shiftPartitionsHorizontally(identity());
	bs.shiftPartitionsVertically(identity());
  mkt::timer_stop("shift");
	
	mkt::roi_end();

	mkt::timer_show("shift");
  mkt::timer_show("map");

}
