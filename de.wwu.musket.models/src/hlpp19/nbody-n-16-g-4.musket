#config PLATFORM GPU CPU_MPMD CUDA
#config PROCESSES 16
#config CORES 24
#config GPUS 4
#config MODE release

const int dim = 500000;
const int steps = 5;

const float EPSILON = 0.0000000001f;
const float DT = 0.01f;

struct Particle{
	float x;
	float y;
	float z;
	float vx;
	float vy;
	float vz;
	float mass;
	float charge;
};

array<Particle,dim,dist,dist> P;
array<Particle,dim,copy,copy> oldP;

Particle init_particles(int i, Particle p){
	p.x = mkt::rand(0.0f, 1.0f);
	p.y = mkt::rand(0.0f, 1.0f);
	p.z = mkt::rand(0.0f, 1.0f);
	p.vx = 0.0f;
	p.vy = 0.0f;
	p.vz = 0.0f;
	p.mass = 1.0f;
	p.charge = 1.0f - 2.0f * (float) (i % 2);
	return p;
}

Particle calc_force(int curIndex, Particle curParticle) {
	float ax = 0.0f;
	float ay = 0.0f;
	float az = 0.0f;

	// calculate forces for the current particle
	for (int j = 0; j < oldP.size(); j++) {

		// do not evaluate interaction with yourself.
		if (j != curIndex) {

			// Evaluate forces that j-particles exert on the i-particle.
			float dx;
			float dy;
			float dz;
			float r2;
			float r;
			float qj_by_r3;

			// Here we absorb the minus sign by changing the order of i and j.
			dx = curParticle.x - oldP[j].x;
			dy = curParticle.y - oldP[j].y;
			dz = curParticle.z - oldP[j].z;

			r2 = dx * dx + dy * dy + dz * dz;
			r = mkt::sqrt(r2);

			// Quench the force if the particles are too close.
			if (r < EPSILON){
				qj_by_r3 = 0.0f;
			} else {
				qj_by_r3 = oldP[j].charge / (r2 * r);
			}

			// accumulate the contribution from particle j.
			ax += qj_by_r3 * dx;
			ay += qj_by_r3 * dy;
			az += qj_by_r3 * dz;
		}
	}

	// advance current particle
	float vx0 = curParticle.vx;
	float vy0 = curParticle.vy;
	float vz0 = curParticle.vz;

	float qidt_by_m = curParticle.charge * DT / curParticle.mass;
	curParticle.vx += ax * qidt_by_m;
	curParticle.vy += ay * qidt_by_m;
	curParticle.vz += az * qidt_by_m;

	// Use average velocity in the interval to advance the particles' positions
	curParticle.x += (vx0 + curParticle.vx) * DT * 0.5f;
	curParticle.y += (vy0 + curParticle.vy) * DT * 0.5f;
	curParticle.z += (vz0 + curParticle.vz) * DT * 0.5f;

	return curParticle;
}

main{
	P.mapIndexInPlace(init_particles());	
	oldP = P.gather();
	
	mkt::roi_start();

	for (int i = 0; i < steps; ++i) {
		P.mapIndexInPlace(calc_force());	
		oldP = P.gather();
	}
  
	mkt::roi_end();
}
