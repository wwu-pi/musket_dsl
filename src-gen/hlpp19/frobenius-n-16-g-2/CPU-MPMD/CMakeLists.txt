cmake_minimum_required(VERSION 3.5)
project(frobenius-n-16-g-2 VERSION 1.0.0 LANGUAGES CXX)

# required macros
SET( CMAKE_CXX_FLAGS_DEV "-O0 -g -march=native -Wall -Wextra -Wpedantic -DMPICH_IGNORE_CXX_SEEK -std=c++14" CACHE STRING "Flags used by the C++ compiler during DEV builds." FORCE )
SET( CMAKE_CXX_FLAGS_TEST "-O3 -g -march=native -fopt-info-vec-optimized -Wall -Wextra -Wpedantic -DMPICH_IGNORE_CXX_SEEK -std=c++14" CACHE STRING "Flags used by the C++ compiler during TEST builds." FORCE )
SET( CMAKE_CXX_FLAGS_VTUNE "-O3 -g -DNDEBUG -march=native -DMPICH_IGNORE_CXX_SEEK -std=c++14" CACHE STRING "Flags used by the C++ compiler during VTUNE builds." FORCE )
SET( CMAKE_CXX_FLAGS_BENCHMARK "-O3 -DNDEBUG -march=native -DMPICH_IGNORE_CXX_SEEK -std=c++14" CACHE STRING "Flags used by the C++ compiler during Benchmark builds." FORCE )
SET( CMAKE_CXX_FLAGS_BENCHMARKPALMA "-O3 -DNDEBUG -march=broadwell -DMPICH_IGNORE_CXX_SEEK -std=c++14" CACHE STRING "Flags used by the C++ compiler during Benchmark builds for Palma." FORCE )
SET( CMAKE_CXX_FLAGS_BENCHMARKTAURUS "-O3 -DNDEBUG -march=haswell -DMPICH_IGNORE_CXX_SEEK -std=c++14" CACHE STRING "Flags used by the C++ compiler during Benchmark builds for Taurus." FORCE )
SET( CMAKE_CXX_FLAGS_CALLGRIND "-O3 -g -DNDEBUG -march=haswell -DMPICH_IGNORE_CXX_SEEK -std=c++14" CACHE STRING "Flags used by the C++ compiler during Callgrind builds for Taurus." FORCE )
		
# output path for binaries and libraries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")

# packages
find_package(MPI REQUIRED)
### this is a cmake bug: MPI link flags are preceeded by two whitespaces, which leads to one leading whitespace, which is now an error according to policy CMP0004.
string(STRIP "${MPI_CXX_LINK_FLAGS}" MPI_CXX_LINK_FLAGS)

find_package(OpenMP REQUIRED)

add_executable(frobenius-n-16-g-2_0 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_0.cpp)
target_include_directories(frobenius-n-16-g-2_0 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_0 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_0 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_1 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_1.cpp)
target_include_directories(frobenius-n-16-g-2_1 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_1 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_1 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_2 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_2.cpp)
target_include_directories(frobenius-n-16-g-2_2 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_2 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_2 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_3 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_3.cpp)
target_include_directories(frobenius-n-16-g-2_3 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_3 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_3 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_4 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_4.cpp)
target_include_directories(frobenius-n-16-g-2_4 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_4 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_4 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_5 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_5.cpp)
target_include_directories(frobenius-n-16-g-2_5 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_5 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_5 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_6 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_6.cpp)
target_include_directories(frobenius-n-16-g-2_6 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_6 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_6 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_7 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_7.cpp)
target_include_directories(frobenius-n-16-g-2_7 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_7 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_7 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_8 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_8.cpp)
target_include_directories(frobenius-n-16-g-2_8 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_8 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_8 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_9 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_9.cpp)
target_include_directories(frobenius-n-16-g-2_9 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_9 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_9 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_10 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_10.cpp)
target_include_directories(frobenius-n-16-g-2_10 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_10 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_10 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_11 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_11.cpp)
target_include_directories(frobenius-n-16-g-2_11 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_11 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_11 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_12 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_12.cpp)
target_include_directories(frobenius-n-16-g-2_12 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_12 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_12 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_13 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_13.cpp)
target_include_directories(frobenius-n-16-g-2_13 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_13 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_13 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_14 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_14.cpp)
target_include_directories(frobenius-n-16-g-2_14 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_14 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_14 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
add_executable(frobenius-n-16-g-2_15 ${PROJECT_SOURCE_DIR}/src/frobenius-n-16-g-2_15.cpp)
target_include_directories(frobenius-n-16-g-2_15 PRIVATE ${PROJECT_SOURCE_DIR}/include/ ${MPI_CXX_INCLUDE_PATH})
target_compile_options(frobenius-n-16-g-2_15 PRIVATE ${MPI_CXX_COMPILE_FLAGS} ${OpenMP_CXX_FLAGS})
target_link_libraries(frobenius-n-16-g-2_15 PRIVATE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})
